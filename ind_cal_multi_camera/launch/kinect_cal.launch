<?xml version="1.0"?>
<launch>
  <!-- This launch file is copy of onenni.launch with small modifications:
        * Topic_ns and tf_prefix replaced a single "camera" parameters
        * Static transforms publishers are not required since the urdf defines
          these.
        * Calibration files are assumed to be in the point_cloud_proc package

       Typical usage: kinect_cal(topic_ns, tf_prefix, device_id, cal_prefix)
       Ex: kinect_cal(camera_1, kinect1, 004@002, 1)
  -->

  <!-- topic_ns: should uniquely identify the node namespace. All topics are pushed down
       into the namespace
  -->
  <arg name="topic_ns" default="camera" />

  <!-- tf_prefix: should uniquely identify the tf namespace.  TF's do not have namespaces
       so prefixes are used instead 
  -->
  <arg name="tf_prefix" default="kinect" />

  <!-- cal_prefix: should uniquely identify the calibration file prefix.  Calibration files
       are assumed to be in file://$(find ind_cal_multi_camera)/launch/asus_cal_files
       Calibration filenames are <cal_prefix>_rgb.yml and <cal_prefix>_ir.yml
  -->
  <arg name="cal_prefix" default="#" />

  <!-- rgb/depth_frame_id: frame ID's defined in URDF.  The frame ID's are prefixed by
       tf_prefix by default.-->
  <arg name="rgb_frame_id"   default="/$(arg tf_prefix)_rgb_frame" />
  <arg name="depth_frame_id" default="/$(arg tf_prefix)_depth_frame" />
  
  <!-- device_id can have the following formats:
         "#1"              : Use first device found
         "2@3"             : Use device on USB bus 2, address 3
         "B00367707227042B": Use device with given serial number
    -->
  <arg name="device_id" default="000@000" />

  <!-- By default, calibrations are stored in
  file://$(find ind_cal_multi_camera)/launch/asus_cal_files/ 
  -->

  <arg name="rgb_camera_info_url"   default="file://$(find ind_cal_multi_camera)/launch/asus_cal_files/$(arg cal_prefix)_rgb.yml" />
  <arg name="depth_camera_info_url" default="file://$(find ind_cal_multi_camera)/launch/asus_cal_files/$(arg cal_prefix)_ir.yml" />



  <!-- Hardware depth registration -->
  <arg name="depth_registration" default="true" />

  <!-- Driver parameters -->
  <arg name="color_depth_synchronization"     default="false" />
  <arg name="auto_exposure"                   default="true" />
  <arg name="auto_white_balance"              default="true" />

  <!-- Arguments for remapping "rgb", "depth", "depth_registered" namespaces -->
  <arg name="rgb"              default="rgb" />
  <arg name="ir"               default="ir" />
  <arg name="depth"            default="depth" />
  <arg name="depth_registered" default="depth_registered" />
  <arg name="projector"        default="projector" />


  <arg name="rgb_processing"                  default="true"  />
  <arg name="debayer_processing"              default="false" />
  <arg name="ir_processing"                   default="false" />
  <arg name="depth_processing"                default="true" />
  <arg name="depth_registered_processing"     default="true" />
  <arg name="disparity_processing"            default="true" />
  <arg name="disparity_registered_processing" default="true" />
  <arg name="hw_registered_processing"        default="true" if="$(arg depth_registration)" />
  <arg name="sw_registered_processing"        default="false" if="$(arg depth_registration)" />
  <arg name="hw_registered_processing"        default="false" unless="$(arg depth_registration)" />
  <arg name="sw_registered_processing"        default="true" unless="$(arg depth_registration)" />

  <!-- Disable bond topics by default -->
  <arg name="respawn" default="false" />
  <arg name="bond" default="false" />
  <arg if="$(arg bond)" name="bond_arg" value="" />
  <arg unless="$(arg bond)" name="bond_arg" value="--no-bond" />

  <!-- Optionally launch manager in GDB, for debugging -->
  <arg name="debug" default="false" />
  <arg if="$(arg debug)" name="launch_prefix" value="xterm -e gdb --args" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <!-- Also globally disable bond heartbeat timeout in debug mode, so everything
       doesn't die when you hit a break point -->
  <param if="$(arg debug)" name="/bond_disable_heartbeat_timeout" value="true" />

  <!-- Worker threads for the nodelet manager -->
  <arg name="num_worker_threads" default="4" />


  <arg name="manager" value="$(arg topic_ns)_nodelet_manager" />
  <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" launch-prefix="$(arg launch_prefix)" />

  <!-- Push down all topics/nodelets into "camera" namespace -->
  <group ns="$(arg topic_ns)">



    <!-- Start nodelet manager -->
	  
    

	  
	  <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
	    <arg name="name" value="$(arg manager)" />
	    <arg name="debug" value="$(arg debug)" />
	    <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
	  </include>


    <!-- Load driver and processing nodelets in standard configuration -->
    <include file="$(find openni2_launch)/launch/includes/device.launch.xml">
      <!-- Could really use some syntactic sugar for this -->
      <arg name="manager"               value="/$(arg manager)" /> <!-- Fully resolved -->
      <arg name="device_id"             value="$(arg device_id)" />
      <arg name="rgb_frame_id"          value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id"        value="$(arg depth_frame_id)" />
      <arg name="rgb_camera_info_url"   value="$(arg rgb_camera_info_url)" />
      <arg name="depth_camera_info_url" value="$(arg depth_camera_info_url)" />
      <arg name="depth_registration"    value="$(arg depth_registration)" />
      <arg name="rgb"                   value="$(arg rgb)" />
      <arg name="ir"                    value="$(arg ir)" />
      <arg name="depth"                 value="$(arg depth)" />
      <arg name="color_depth_synchronization"     value="$(arg color_depth_synchronization)" />
      <arg name="auto_exposure"                   value="$(arg auto_exposure)" />
      <arg name="auto_white_balance"              value="$(arg auto_white_balance)" />

     
      <!--
      <arg name="rgb_camera_info_url"   value="" />
      <arg name="depth_camera_info_url" value="" />
      
      <arg name="depth_registered"      value="$(arg depth_registered)" />

      <arg name="projector"             value="$(arg projector)" />
    
      <arg name="bond"                  value="$(arg bond_arg)" />
    -->
    </include>


    <!-- Load standard constellation of processing nodelets -->
    <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
      <arg name="manager"                         value="$(arg manager)" />
      <arg name="rgb"                             value="$(arg rgb)" />
      <arg name="ir"                              value="$(arg ir)" />
      <arg name="depth"                           value="$(arg depth)" />
      <arg name="respawn"                         value="$(arg respawn)" />
      <arg name="rgb_processing"                  value="$(arg rgb_processing)" />
      <arg name="debayer_processing"              value="$(arg debayer_processing)" />
      <arg name="ir_processing"                   value="$(arg ir_processing)" />
      <arg name="depth_processing"                value="$(arg depth_processing)" />
      <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)" />
      <arg name="disparity_processing"            value="$(arg disparity_processing)" />
      <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
      <arg name="hw_registered_processing"        value="$(arg hw_registered_processing)" />
      <arg name="sw_registered_processing"        value="$(arg sw_registered_processing)" />
      
    </include>

  </group> <!-- topic_ns -->

  <arg name="publish_tf" default="true" /> 
  

  <!-- Load reasonable defaults for the relative pose between cameras -->
  <include if="$(arg publish_tf)"
	   file="$(find point_cloud_proc)/launch/k$(arg cal_prefix)_frames.launch">
    <arg name="camera" value="$(arg tf_prefix)" />
    
  </include>


</launch>
